@using Microsoft.AspNetCore.Components
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<!-- Ylätason navigointipalkki -->
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Used Phones Web Shop</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>
<!-- Varsinainen navigointivalikko -->
<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/browse-phones" Match="NavLinkMatch.Prefix">
                <span class="bi bi-phone" aria-hidden="true"></span> Tuotteet
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/register" Match="NavLinkMatch.Prefix">
                <span class="bi bi-person-plus-fill" aria-hidden="true"></span> Rekisteröidy
            </NavLink>
        </div>
        @if (!isUserLoggedIn)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/login" Match="NavLinkMatch.Prefix">
                    <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Kirjaudu sisään
                </NavLink>
            </div>
        }
        @if (isAdmin)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/manage-account" Match="NavLinkMatch.Prefix">
                    <span class="bi bi-gear-fill" aria-hidden="true"></span> Käyttäjätilien Hallinta
                </NavLink>
            </div>
        }
        @if (isCustomer)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/manage-customer-account" Match="NavLinkMatch.Prefix">
                    <span class="bi bi-person-circle" aria-hidden="true"></span> Käyttäjän Hallinta
                </NavLink>
            </div>
        }
        @if (isUserLoggedIn)
        {
            <!-- Linkki uloskirjautumiseen -->
            <div class="nav-item px-3 mt-auto">
                <button class="nav-link btn btn-link text-start" @onclick="Logout">
                    <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Kirjaudu ulos
                </button>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private bool isUserLoggedIn;
    private bool isAdmin;
    private bool isCustomer;

    protected override async Task OnInitializedAsync()
    {
        var authStateProvider = AuthenticationStateProvider as AuthenticationStateProvider;
        if (authStateProvider != null)
        {
            authStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        }
        await CheckUserLoggedIn();
        await CheckUserRoles();
        StateHasChanged(); // Add this line to update the UI after checking roles
    }

    private async Task CheckUserLoggedIn()
    {
        var token = await localStorage.GetItemAsync<string>("authToken");
        isUserLoggedIn = !string.IsNullOrEmpty(token); // Check if the user is logged in
        StateHasChanged(); // Päivitä UI, kun tieto on saatu
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await CheckUserLoggedIn();
        await CheckUserRoles(); // Ensure roles are checked when authentication state changes
        StateHasChanged(); // Update UI after authentication state changes
    }

    private async Task CheckUserRoles()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.IsInRole("Admin");
        isCustomer = user.IsInRole("Customer");
    }

    private async Task Logout()
    {
        var response = await Http.PostAsync("/api/auth/logout", null);

        if (response.IsSuccessStatusCode)
        {
            await localStorage.RemoveItemAsync("authToken");
            isUserLoggedIn = false; // Päivitä kirjautumistila
            isAdmin = false; // Reset isAdmin flag
            isCustomer = false; // Reset isCustomer flag
            StateHasChanged(); // Päivitä UI
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Console.WriteLine("Uloskirjautuminen epäonnistui.");
        }
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private HttpClient Http { get; set; }

    [Inject]
    private ILocalStorageService localStorage { get; set; }
}
