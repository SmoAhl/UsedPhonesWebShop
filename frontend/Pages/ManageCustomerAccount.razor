@page "/manage-customer-account"
@attribute [Authorize(Roles = "Customer")]
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using Shared.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@using System.Net.Http.Json

// Tämä komponentti hallinnoi Customer-roolin käyttäjien tilitietojen päivittämistä.
// 1. Customer voi nähdä ja muokata vain omia tietojaan.
// 2. Oikeudet ja autentikointi varmistetaan JWT-tokenin avulla.
// 3. API-yhteys kohdistuu `AccountManagerApi`-reitteihin, erityisesti `GetCurrentUser` ja `UpdateUser`.

<PageTitle>Manage Customer Account</PageTitle>

<h3>Manage Customer Account</h3>

@if (isAuthenticated)
{
    if (isAuthorized)
    {
        @if (editingUser == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Email</th>
                        <th>Etunimi</th>
                        <th>Sukunimi</th>
                        <th>Osoite</th>
                        <th>Puhelinnumero</th>
                        <th>Toiminnot</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@editingUser.Email</td>
                        <td>@editingUser.FirstName</td>
                        <td>@editingUser.LastName</td>
                        <td>@editingUser.Address</td>
                        <td>@editingUser.PhoneNumber</td>
                        <td>
                            <button class="btn btn-sm btn-primary me-2" @onclick="EditUser">Muokkaa</button>
                        </td>
                    </tr>
                </tbody>
            </table>
        }

        @if (isEditing && editingUser != null)
        {
            <EditForm Model="editingUser" OnValidSubmit="UpdateUser">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="editingUser.Email" disabled />
                </div>
                <div class="mb-3">
                    <label for="firstName" class="form-label">Etunimi</label>
                    <InputText id="firstName" class="form-control" @bind-Value="editingUser.FirstName" />
                </div>
                <div class="mb-3">
                    <label for="lastName" class="form-label">Sukunimi</label>
                    <InputText id="lastName" class="form-control" @bind-Value="editingUser.LastName" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Osoite</label>
                    <InputText id="address" class="form-control" @bind-Value="editingUser.Address" />
                </div>
                <div class="mb-3">
                    <label for="phoneNumber" class="form-label">Puhelinnumero</label>
                    <InputText id="phoneNumber" class="form-control" @bind-Value="editingUser.PhoneNumber" />
                </div>

                <button type="submit" class="btn btn-primary">Tallenna</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Peruuta</button>
            </EditForm>
        }
    }
    else
    {
        <p>You are not authorized to view this page.</p>
        <div class="alert alert-danger">
            <strong>Pääsy estetty:</strong> Sinulla ei ole oikeuksia tähän toimintoon.
        </div>
    }
}
else
{
    <div class="alert alert-danger">
        <strong>Pääsy estetty:</strong> Sinulla ei ole oikeuksia tähän toimintoon.
    </div>
}

@code {
    private UserModel editingUser = new UserModel();
    private bool isAuthenticated = false;
    private bool isAuthorized = false;
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        Console.WriteLine($"Authenticated: {user.Identity?.IsAuthenticated}");
        Console.WriteLine($"User: {user.Identity?.Name}");

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            isAuthenticated = true;
            var roles = user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).ToList();
            Console.WriteLine($"Roles: {string.Join(", ", roles)}");

            if (roles.Contains("Customer"))
            {
                isAuthorized = true;
                await LoadUser();
            }
            else
            {
                Console.WriteLine("User is not authorized.");
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated.");
        }
    }

    // Hakee kirjautuneen Customer-käyttäjän tiedot API:n kautta.
    // Käytetään `/api/auth/currentuser`-reittiä, joka palauttaa vain kirjautuneen käyttäjän tiedot.
    // Tarkista, että `UserID`-arvo on oikein ja ettei se ole nolla.
    private async Task LoadUser()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            Console.WriteLine("User Claims:");
            foreach (var claim in user.Claims)
            {
                Console.WriteLine($"{claim.Type}: {claim.Value}");
            }

            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);

            if (userIdClaim == null)
            {
                Console.WriteLine("User ID claim is missing.");
                return;
            }

            if (!int.TryParse(userIdClaim.Value, out int userId) || userId == 0)
            {
                Console.WriteLine("Invalid User ID claim.");
                return;
            }

            Console.WriteLine($"Loading user with ID: {userId}");

            editingUser = await Http.GetFromJsonAsync<UserModel>("/api/auth/currentuser");
            if (editingUser == null || editingUser.UserID == 0)
            {
                Console.WriteLine("Failed to load user or UserID is invalid.");
            }
            else
            {
                Console.WriteLine($"User loaded: {editingUser.Email}, ID: {editingUser.UserID}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user: {ex.Message}");
        }
    }

    private void EditUser()
    {
        Console.WriteLine("EditUser called");
        isEditing = true;
    }

    // Päivittää kirjautuneen Customer-käyttäjän tiedot API:n kautta.
    // Lähettää PUT-pyynnön `/api/auth/updateuser/{UserID}`-reitille.
    // Tarkista, että API vastaa onnistuneesti (statuskoodi 200) ja antaa virheilmoituksen, jos päivitys epäonnistuu.
    private async Task UpdateUser()
    {
        try
        {
            if (editingUser.UserID == 0)
            {
                Console.WriteLine("UserID is invalid. Cannot proceed with update.");
                await JSRuntime.InvokeVoidAsync("alert", "Käyttäjän ID on virheellinen. Päivitys epäonnistui.");
                return;
            }

            Console.WriteLine($"Updating user with ID: {editingUser.UserID}");
            var response = await Http.PutAsJsonAsync($"/api/auth/updateuser/{editingUser.UserID}", editingUser);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("User updated successfully");
                isEditing = false;
                await LoadUser();
                await JSRuntime.InvokeVoidAsync("alert", "Käyttäjä päivitetty onnistuneesti.");
            }
            else
            {
                Console.WriteLine("Failed to update user");
                await JSRuntime.InvokeVoidAsync("alert", "Käyttäjän päivittäminen epäonnistui.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating user: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        editingUser = null;
    }
}